{"version":3,"sources":["Nav.js","Intro.js","Members.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","Link","to","Intro","src_Nav","Member","App","BrowserRouter","Route","exact","path","component","IntorPage","Members","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAUeA,EAPH,kBACVC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KAAIL,EAAAC,EAAAC,cAAA,+BAEbF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,YAAWL,EAAAC,EAAAC,cAAA,uBCwBTI,SAzBD,kBACZN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACK,EAAD,MAEAP,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,wGAEAF,EAAAC,EAAAC,cAAA,8CACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,+DACAF,EAAAC,EAAAC,cAAA,8IACAF,EAAAC,EAAAC,cAAA,uHACAF,EAAAC,EAAAC,cAAA,wDACAF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,wEACAF,EAAAC,EAAAC,cAAA,0DACAF,EAAAC,EAAAC,cAAA,+CACAF,EAAAC,EAAAC,cAAA,oDACAF,EAAAC,EAAAC,cAAA,0EACAF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,uECsBSM,EA7CA,kBACbR,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACK,EAAD,MAEAP,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,sFAEAF,EAAAC,EAAAC,cAAA,sFAEAF,EAAAC,EAAAC,cAAA,kFAEAF,EAAAC,EAAAC,cAAA,8EAEAF,EAAAC,EAAAC,cAAA,sFAEAF,EAAAC,EAAAC,cAAA,2EAEAF,EAAAC,EAAAC,cAAA,sEAEAF,EAAAC,EAAAC,cAAA,4FAEAF,EAAAC,EAAAC,cAAA,2EAEAF,EAAAC,EAAAC,cAAA,mFAEAF,EAAAC,EAAAC,cAAA,kFAEAF,EAAAC,EAAAC,cAAA,kFAEAF,EAAAC,EAAAC,cAAA,0FAEAF,EAAAC,EAAAC,cAAA,yFAEAF,EAAAC,EAAAC,cAAA,6FAEAF,EAAAC,EAAAC,cAAA,iFAEAF,EAAAC,EAAAC,cAAA,oFAEAF,EAAAC,EAAAC,cAAA,2EAEAF,EAAAC,EAAAC,cAAA,oFC1BSO,mLAXX,OACET,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjCf,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWE,aANhCC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d89c6b94.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nconst Nav = () => \n  <nav className=\"intor-nav\">\n    <Link to=\"/\"><h3>The Neighborhood</h3></Link>\n\n    <Link to=\"/members\"><p>Members</p></Link>\n  </nav>\n\nexport default Nav;","import React from 'react';\n\nimport Nav from './Nav';\n\nimport './Intro.css';\n\nconst Intro = () => \n  <div >\n    <Nav />\n    \n    <h1>The Neighbourhood</h1>\n    <p>We are a group of individuals who have embarked on a journey to master software engineering</p>\n\n    <h2>Current Objective/Goals/Projects</h2>\n    <ul>\n      <li>Gathering members with either ambition or dispair</li>\n      <li>Long terms golas of learning and working with Data Science, Blockchain, Internet of Things and Music (edm, sysnthesis, ai music)</li>\n      <li>Starting with learning Python then JavaScript with aim of learning to become a language agnostic/polyglot</li>\n      <li>Learn DataStructes and Algorithms together</li>\n      <li>Project: Group website</li>\n      <li>Project: Data Science blog</li>\n      <li>Project: Blockchain trading bot and decentralized exchange</li>\n      <li>Project: Learning platform like freecodecamp</li>\n      <li>Project: The Neighborhood podcast</li>\n      <li>Goal: Monetize anything we build/write</li>\n      <li>Goal: A common portfolio site with eye catching achievements</li>\n      <li>Goal: Getting funded</li>\n      <li>Goal:  Building co-working space/Fab lab/ lab/ studio</li>\n    </ul>\n  </div>\n\nexport default Intro;","import React from 'react';\n\nimport Nav from './Nav';\n\nconst Member = () => \n  <div>\n    <Nav />\n    \n    <ul>\n      <li>Sk. Imtiaz Ahmed @Sk Imtiaz Ahmed  https://www.facebook.com/excalliburbd</li>\n\n      <li>Mohaimin Islam @Mohaimin Islam  https://www.facebook.com/Mohaiminislam17</li>\n\n      <li>Tahmid Choyon @Tahmid Choyon  https://www.facebook.com/tahmid.choyon</li>\n\n      <li>Tauki Tahmid @Tauki Tahmid  https://www.facebook.com/taukitahmid</li>\n\n      <li>Niger Sultana Mimi @Niger Sultana Mimi  https://www.facebook.com/mimijsr</li>\n\n      <li>Farhan Rashid @Farhan Rashid  https://www.facebook.com/FR0007</li>\n\n      <li>Galib Hasan @Galib Hasan https://www.facebook.com/thesej</li>\n\n      <li>Tanim-ul Haque Khan @Tanimul Haque Khan  https://www.facebook.com/tanimul.khan</li>\n\n      <li>Fahimu Aleem @Fahimu Aleem https://www.facebook.com/fahim1710</li>\n\n      <li>Shajal Ahamed @Shajal Ahamed https://www.facebook.com/shajal.ahamed.3</li>\n\n      <li>Ashraful Jannat @Ashraful Jannat  https://www.facebook.com/ajannattt</li>\n\n      <li>Taufiq Rahman @Taufiq Rahman https://www.facebook.com/Taufiq.Inconnu</li>\n\n      <li>Shahriar Saleque @Shahriar Saleque https://www.facebook.com/shahriar.saleque</li>\n\n      <li>Shahriyer Shuvo  @Shahriyer Shuvo  https://www.facebook.com/shahriyer.shuvo</li>\n\n      <li>Saidur Rahman Sajjad  @sajjad#7456 https://www.facebook.com/saidurrahman.sajjad</li>\n\n      <li>Arif Ibrahim @Arif Ibrahim  https://www.facebook.com/arifibrahim80s</li>\n\n      <li>Ratul Bin Tazul @Ratul Bin Tazul  https://www.facebook.com/RATUL.TAZUL</li>\n\n      <li>Redwan Alif @Redwan Alif https://www.facebook.com/redwan.alif</li>\n\n      <li>Tahsin Tausif @Tahsin Tausif  https://www.facebook.com/tausiftt5238</li>\n    </ul>\n  </div>\n\nexport default Member;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport IntorPage from './Intro';\nimport Members from './Members';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Route exact path=\"/\" component={IntorPage} />\n          <Route exact path=\"/members\" component={Members} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}